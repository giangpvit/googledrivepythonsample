<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="YoutubePlayer/View/Stop" type="0" type_size="1" nature="4" stm_value_name="YoutubePlayer/View/Stop" inner="1" tooltip="YoutubePlayer/View/Stop desc" id="4" /><Input name="YoutubePlayer/View/Voice" type="0" type_size="1" nature="4" stm_value_name="YoutubePlayer/View/Voice" inner="1" tooltip="YoutubePlayer/View/Voice desc" id="5" /><Input name="YoutubePlayer/View/VoiceStop" type="0" type_size="1" nature="4" stm_value_name="YoutubePlayer/View/VoiceStop" inner="1" tooltip="YoutubePlayer/View/VoiceStop desc" id="6" /><Input name="YoutubePlayer/View/Search" type="0" type_size="1" nature="4" stm_value_name="YoutubePlayer/View/Search" inner="1" tooltip="YoutubePlayer/View/Search desc" id="7" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="172" y="62"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Log" id="3" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="113" y="385"><bitmap>media/images/box/print.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" /><Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" /><Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5"><Choice value="Fatal" /><Choice value="Error" /><Choice value="Warning" /><Choice value="Info" /><Choice value="Debug" /></Parameter></Box><Box name="Hide Web View" id="4" localization="8" tooltip="Hides the webview (html content) on the tablet, behind a generic cover&#x0A;&#x0A;V1.0.0&#x0A;" x="383" y="103"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.hideWebview()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="GoogleSTT" id="1" localization="8" tooltip="This box is empty and should be used to create any box diagram you would like.&#x0A;&#x0A;To edit its diagram, double-click on it." x="191" y="237"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="YoutubePlayer/Control/StopVoice" type="0" type_size="1" nature="4" stm_value_name="YoutubePlayer/Control/StopVoice" inner="1" tooltip="YoutubePlayer/Control/StopVoice desc" id="4" /><Output name="NonRecognition" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="Recognition" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Parameter name="GoogleSTTKey" inherits_from_parent="0" content_type="4" value="/key2.json" default_value="" tooltip="" id="8" /><Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="15" default_value="0" min="0" max="100" tooltip="" id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="70.7107"><Box name="GSTT V1Beta" id="4" localization="8" tooltip="" x="613" y="31"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import os
import time
from datetime import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.discovery_url = ('https://{api}.googleapis.com/$discovery/rest?'
            'version={apiVersion}')

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.framemanager = ALProxy("ALFrameManager")

    def onUnload(self):
        self.framemanager = None
        if os.environ.has_key("GOOGLE_APPLICATION_CREDENTIALS"):
            os.environ.pop("GOOGLE_APPLICATION_CREDENTIALS")

    def getTimeStamp(self):
        '''
        タイムスタンプ取得
        '''
        return datetime.now().strftime('%H:%M:%S').encode('utf-8')

    def onInput_onStart(self, filename):
        '''
        音声認識開始
        '''
        # APIキーの反映
        keyPath = self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("GoogleSTTKey")
        self.logger.info("onStart id:" + self.framemanager.getBehaviorPath(self.behaviorId))
        if (not os.path.exists(keyPath)):
            self.logger.info("onStart:" + keyPath)
            #self.leds.post.fadeRGB("RightFaceLeds", 0xff0000, 0)
            return
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = keyPath

        # Google Speech APIで音声認識開始
        #self.leds.post.fadeRGB("FaceLeds", 0x00ff00, 0)
        res = self.startSpeechRecognition(filename)
        results = json.loads(res)
        self.logger.info(results)

        try:
            # レスポンス結果が空の場合は認識できなかったとする
            if len(results) == 0:
                self.logger.info("[STT Info]: 認識失敗 %s" % self.getTimeStamp())
                #self.leds.post.fadeRGB("FaceLeds", 0x0000ff, 0)
                self.NonRecognition(filename)
            else:
                # 内容を確認する
                if('alternatives' in results['results'][0]):
                    speech_reco = results['results'][0]['alternatives'][0]['transcript']
                    #self.leds.post.fadeRGB("FaceLeds", 0xffffff, 0)
                    self.logger.info("[STT Info]: 認識成功 %s" % self.getTimeStamp())
                    self.logger.info("[STT Info]: 認識結果： " + speech_reco.encode("utf-8"))
                    self.Recognition(speech_reco.encode('utf-8'))
                # エラー
                else:
                    self.leds.post.fadeRGB("LeftFaceLeds", 0xff0000, 0)
                    self.NonRecognition(filename)
        except Exception as e:
            self.leds.post.fadeRGB("LeftFaceLeds", 0xffff00, 0)
            self.NonRecognition(filename)

    def encodeAudio(self, audio):
        '''
        エンコード処理
        '''
        import base64
        audio_content = audio.read()
        return base64.b64encode(audio_content)

    def getSpeechService(self):
        from googleapiclient import discovery
        import httplib2
        from oauth2client.client import GoogleCredentials

        credentials = GoogleCredentials.get_application_default().create_scoped(['https://www.googleapis.com/auth/cloud-platform'])
        http = httplib2.Http()
        credentials.authorize(http)

        return discovery.build('speech', 'v1beta1', http = http, discoveryServiceUrl = self.discovery_url)

    def startSpeechRecognition(self, sound_file):
        '''
        音声認識開始
        '''

        try:
            with open(sound_file, 'rb') as sound:
                sound_content = self.encodeAudio(sound)
            service = self.getSpeechService()
            service_request = service.speech().syncrecognize(
                body = {
                    'config': {
                        'encoding': 'LINEAR16',
                        'sampleRate': 16000,
                        'languageCode': 'ja-JP',
                    },
                    'audio': {
                        'content': sound_content.decode('utf-8')
                        }
                    })
            res_json = service_request.execute()
        except Exception as e:
            res_json = {'results': str(e)}

        return json.dumps(res_json)

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="Recognition" type="3" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" /><Output name="NonRecognition" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Parameter name="Timeout" inherits_from_parent="1" content_type="1" value="15" default_value="10" min="1" max="3600" tooltip="" id="6" /><Parameter name="GoogleSTTKey" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="" id="7" /></Box><Box name="Timeout" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="814" y="230"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        id = self.leds.post.fadeRGB("RightFaceLeds", 0xff00ff, 0)
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="RecoFeedback" id="2" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="241" y="450"><bitmap>media/images/box/interaction/ear.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = ALProxy("ALMemory")
        self.leds = ALProxy("ALLeds")

    def onLoad(self):
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock

        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.setVisualExpression(self.getParameter("Visual expression"))
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary("/".split(';'), 0)
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            self.logger.info(e)
            self.leds.post.fadeRGB("FaceLeds", 0xff0000, 1.0)
            self.leds.post.fade("EarLeds", 0, 1.0)

            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.asr.setVisualExpression(0) # 意図的にOFFにする
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        self.asr.setVisualExpression(0) # 意図的にOFFにする
        self.onUnload()
        self.onStopRecording()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" /><Output name="onStopRecording" type="1" type_size="1" nature="1" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="4" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="6" /><Parameter name="Visual expression" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Use the LEDs to show feedbacks from the robot during the recognition.&#x0A;&#x0A;For example:&#x0A;- Eyes leds get blue and turn when the speech recognition is launched.&#x0A;- They get yellow when the robot hears someone talking and analyses what it heard.&#x0A;- They flash in green when the robot understood and flash in red otherwise." id="7" /><Resource name="Speech recognition" type="Lock" timeout="-1" /></Box><Box name="Raise Event" id="7" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="846" y="412"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="YoutubePlayer/Control/Processing" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Text Edit (1)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="529" y="407"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("認識中 ...\n")]]></content></script><pluginContent><text><![CDATA[認識中 ...
]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Text Edit" id="3" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="986" y="184"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("認識失敗")]]></content></script><pluginContent><text><![CDATA[認識失敗]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Box name="Mic Monitor" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="268" y="9"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.ad = ALProxy("ALAudioDevice")
        self.memory = ALProxy("ALMemory")
        self.checkFlag = True

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        self.checkFlag = False

    def onInput_onStart(self):
        '''
        マイクの入力レベルを確認する
        '''

        self.checkFlag = True
        self.threshold = 2000 # 閾値
        updateCounter = 0

        # polling開始
        while self.checkFlag:
            eng = {"front":0, "right":0, "left":0}
            eng["front"] = self.ad.getFrontMicEnergy()
            eng["right"] = self.ad.getRightMicEnergy()
            eng["left"] = self.ad.getLeftMicEnergy()
            eng_sort = sorted(eng.items(), key=lambda x: x[1])

            # レベルが閾値を超える
            if (self.threshold <= eng_sort[2][1]):
                #self.logger.info("■■■ mic level over")
                self.memory.insertData("rec-expantion", 1)
                self.memory.insertData("rec-active", 1)
                self.memory.insertData("active-mic-"+eng_sort[2][0],1)
                pass

            elif (eng_sort[2][1] < self.threshold):
                #self.logger.info("■■■ mic level under")
                self.memory.insertData("rec-expantion", 0)
                pass

            # 閾値の更新
            if(updateCounter == 50):
                updateCounter = 0
                self.updateThreshold(eng)

            time.sleep(.1)

    def updateThreshold(self, eng):
        '''
        閾値を更新する
        '''
        self.threshold = ((self.threshold + eng) / 2) + 1000
        self.logger.info('now: ' + str(int(eng)) + ' th: ' + str(int(self.threshold)))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Recorder" id="9" localization="8" tooltip="Stimulate output repeatedly with the specified interval.&#x0A;Can be stopped anytime. &#x0A;Stimulating the input again restarts the timer.&#x0A;" x="378" y="167"><bitmap>media/images/box/interaction/rec_sound.png</bitmap><script language="4"><content><![CDATA[import os
import time
import threading
from datetime import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.recoder = ALProxy("ALAudioRecorder")
        self.memory = ALProxy("ALMemory")
        self.player = ALProxy("ALAudioPlayer")
        self.leds = ALProxy("ALLeds")
        self.appFolder = ''
        self.recPath = ''

    def onLoad(self):
        self.timer = None
        # 状態管理用フラグの初期化
        self.memory.insertData("rec-expantion", 0)
        self.memory.insertData("rec-active", 0)
        self.memory.insertData("rec-mode", 0)
        self.memory.insertData("active-mic-front", 0)
        self.memory.insertData("active-mic-right", 0)
        self.memory.insertData("active-mic-left", 0)

        if os.path.exists('/tmp/recordings/microphones/') is False:
            os.makedirs("/tmp/recordings/microphones/")
        self.recPath = "/tmp/recordings/microphones/temp.wav"

    def onUnload(self):
        self.cancelTimer()
        # 録音ファイルを削除する
        if (os.path.exists(self.recPath)):
            self.logger.info("[STT Info]: 録音ファイル削除" + self.recPath)
            os.remove(self.recPath)

    def getTimeStamp(self):
        '''
        タイムスタンプ取得
        '''
        return datetime.now().strftime('%H:%M:%S').encode('utf-8')

    def cancelTimer(self):
        if self.timer:
            self.timer.stop()
        self.timer = None

    def onTimer(self):
        '''
        録音タイマー
        '''
        self.getTimeStamp()
        # 録音していない場合
        if(self.memory.getData("rec-mode") == 0):
            self.logger.info("[STT Info]: 録音開始 %s" % self.getTimeStamp())
            self.startRecoder()
        # 録音中の場合
        else:
            # 延長フラグがない場合
            if (self.memory.getData("rec-expantion") == 0):

                if (self.memory.getData("rec-active") == 1):
                    self.logger.info("[STT Info]: 録音終了 %s" % self.getTimeStamp())
                    self.logger.info("[STT Info]: 送信開始 %s" % self.getTimeStamp())
                    self.memory.insertData("rec-active", 0)
                    self.timerOutput(self.recPath)
                    self.stopRecoder()
                    self.onInput_onStop()
                else:
                    self.stopRecoder()
                    self.logger.info("[STT Info]: ドロップ %s" % self.getTimeStamp())
                    self.startRecoder() # キャンセル時の起動
            # 延長フラグがある場合
            else:
                self.memory.insertData("rec-expantion", 0)

    def startRecoder(self):
        '''
        録音開始
        '''
        self.memory.insertData("rec-mode", 1)

        if self.memory.getData("active-mic-right") == 1 and self.memory.getData("active-mic-left") == 0:
            self.recoder.startMicrophonesRecording(self.recPath, "wav", 16000, [0,1,0,0])
        elif self.memory.getData("active-mic-right") == 0 and self.memory.getData("active-mic-left") == 1:
            self.recoder.startMicrophonesRecording(self.recPath, "wav", 16000, [1,0,0,0])
        else:
            self.recoder.startMicrophonesRecording(self.recPath, "wav", 16000, [0,0,1,0])
        id = self.leds.post.fadeRGB("FaceLeds", 0xffffff, 0)

    def stopRecoder(self):
        '''
        録音停止
        '''
        self.memory.insertData("rec-mode", 0)
        self.memory.insertData("active-mic-front", 0)
        self.memory.insertData("active-mic-right", 0)
        self.memory.insertData("active-mic-left", 0)
        self.recoder.stopMicrophonesRecording()

    def startTimer(self):
        import qi
        self.timer = qi.PeriodicTask()
        self.timer.setCallback(self.onTimer)
        self.timer.setUsPeriod(int(self.getParameter("Period (s)") * 1000 * 1000))
        self.timer.start(True)

    def onInput_onStart(self):
        self.cancelTimer()

        # ポコ音の再生
        #self.appFolder = self.behaviorAbsolutePath().replace(self.behaviorRelativePath(), "")
        #self.player.playFile(os.path.join(self.appFolder, 'begin_reco.ogg'))
        time.sleep(1.0)

        self.memory.insertData("rec-active", 0)
#
        self.startTimer()

    def onInput_onRecognized(self):
        '''
        Reco による停止
        '''
        self.logger.info("[STT Info]: 録音終了 %s" % self.getTimeStamp())
        self.logger.info("[STT Info]: 送信開始 %s" % self.getTimeStamp())
        self.memory.insertData("rec-active", 0)
        #self.logger.info("■■■" + self.recPath)
        self.stopRecoder()
        self.timerOutput(self.recPath)
        self.onInput_onStop()

    def onInput_onStop(self):
        self.logger.info("[STT Info]: 録音終了 %s" % self.getTimeStamp())
        if self.timer and self.timer.isRunning():
            self.onStopped()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the timer using the configured period value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the timer." id="3" /><Input name="onRecognized" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the box is stopped." id="5" /><Output name="timerOutput" type="3" type_size="1" nature="2" inner="0" tooltip="Send a bang periodically." id="6" /><Parameter name="Period (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Defines the period of the timer box (in seconds).&#x0A;&#x0A;For example, if this parameter is equal to 1s, the timerOutput will be stimulated&#x0A;every second until the onStop input is stimulated." id="7" /></Box><Box name="Timeout (1)" id="1" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="221" y="230"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None
        self.leds = ALProxy("ALLeds")

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        id = self.leds.post.fadeRGB("RightFaceLeds", 0xff00ff, 0)
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.onStopRecording()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Output name="onStopRecording" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="20" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="6" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="7" /></Box><Box name="Text Edit (2)" id="10" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1064" y="346"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("聞き取れませんでした。もう一度お試しください")]]></content></script><pluginContent><text><![CDATA[聞き取れませんでした。もう一度お試しください]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" /></Box><Link inputowner="6" indexofinput="3" outputowner="4" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="4" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="8" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="5" /><Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="3" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="7" outputowner="0" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="9" indexofoutput="6" /><Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="6" /><Link inputowner="9" indexofinput="3" outputowner="0" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="3" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="10" indexofoutput="3" /><Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" /><Link inputowner="9" indexofinput="4" outputowner="1" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SetPathLibFld" id="5" localization="8" tooltip="プロジェクトの Lib フォルダーに Python パスを通す" x="288" y="7"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.pathModified = False

    def onUnload(self):
        if self.pathModified and self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self):
        appFolder = self.behaviorAbsolutePath().replace(self.behaviorRelativePath(), "")
        self.folderName = os.path.join(appFolder, "lib")
        if self.folderName not in sys.path:
            sys.path.insert(0, self.folderName)
            self.pathModified = True

        self.onReady()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Raise Event" id="6" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="407" y="387"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="YoutubePlayer/Control/Recognition" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Show App (1)" id="7" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="566" y="187"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Raise Event (1)" id="8" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="378" y="238"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="YoutubePlayer/Control/NoRecognition" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="7" /><Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>